import os
import re
import platform

opts = Variables('etjump.conf')
opts.AddVariables(
EnumVariable('warnings', 'Choose warnings level', '1', allowed_values = ('0', '1', '2')),
EnumVariable('debug', 'Set to >= 1 to build for debug', '0', allowed_values = ('0', '1', '2', '3')),
EnumVariable('optimize', 'Set to >= 1 to build with general optimizations', '2', allowed_values = ('0', '1', '2', '3')),
BoolVariable('verbose', 'Set to 1 to see compile commands processed', 0))

env = Environment(ENV = os.environ, options = opts)

Help(opts.GenerateHelpText(env))

# -m32
env.Append(CCFLAGS = '-m32')
env.Append(LINKFLAGS = '-m32')

env.Append(CCFLAGS = '-fsigned-char -fno-strict-aliasing')

if env['warnings'] == '1':
  env.Append(CCFLAGS = '-Wall -Wno-unused-parameter')
elif env['warnings'] == '2':
  env.Append(CCFLAGS = '-Wall -Werror')

if env['debug'] != '0':
  env.Append(CCFLAGS = '-ggdb${debug} -D_DEBUG -DDEBUG')
else:
  env.Append(CCFLAGS = '-DNDEBUG')

if env['optimize'] != '0':
  env.Append(CCFLAGS = '-O${optimize} -ffast-math')

if not env['verbose']:
  env['ARCOMSTR'] = 'AR $TARGET'
  env['CCCOMSTR'] = 'CC $TARGET'
  env['SHCCCOMSTR'] = 'CC $TARGET'
  env['LINKCOMSTR'] = 'LD $TARGET'
  env['SHLINKCOMSTR'] = 'LD $TARGET'
  env['RANLIBCOMSTR'] = 'RANLIB $TARGET'

opts.Save('etjump.conf', env)

Export('env')

cgame = SConscript('SConscript.cgame', variant_dir = 'build/cgame', duplicate = 0)
InstallAs('#cgame.mp.i386.so', cgame)
game = SConscript('SConscript.game', variant_dir = 'build/game', duplicate = 0)
InstallAs('#qagame.mp.i386.so', game)
ui = SConscript('SConscript.ui', variant_dir = 'build/ui', duplicate = 0)
InstallAs('#ui.mp.i386.so', ui)
